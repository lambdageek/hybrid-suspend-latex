\documentclass{article}
\pagestyle{headings}
\usepackage[margin=0.75in]{geometry}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{paralist}
\usepackage{tikz}
\usepackage{pgf-umlsd}
\usepackage[noabbrev,capitalize]{cleveref}

\title{Hybrid Suspend}
\date{\today}
\author{Aleksey Kliger}

\input{preamble.ltx}


\begin{document}
\maketitle

\section{Async suspend}

Traditionally Mono used an asynchronous suspend mechanism.  With async suspend
the suspend victim participates passively.

\subsection{With POSIX signals}

\paragraph{Suspending} To suspend we switch the victim thread to
\StateAsyncSuspendRequested{} and then send it the suspend signal and add it to the pending operations wait set.
If there are multiple victims we do this for all of them and then wait for
notification that the pending operations completed.

The victim's signal handler switches the state to \StateAsyncSuspended{} and
notifies the initiator and then calls \texttt{sigsuspend()} to wait until it is
sent a resume signal.

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newthread{initiator}{Initiator}
    \newinst[1]{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \newinst{sig}{Signal Handler}
    \begin{call}{initiator}{begin-suspend}{initiator}{}
      \StateTransitionR{initiator}{request-suspend}{state}{\StateRunning{}}{\StateAsyncSuspendRequested{}}{InitSusRunning}{2}{west}

      \mess[1]{initiator}{{tkill()}}{victim}
      \begin{call}{initiator}{add-to-pending-ops}{initiator}{}
      \end{call}
    \end{call}
    \begin{call}{initiator}{wait-for-pending-ops}{initiator}{}
      \prelevel\prelevel\prelevel\prelevel
      \begin{call}{victim}{handler}{sig}{}
        \StateTransitionR{sig}{finish-async-suspend}{state}{\StateAsyncSuspendRequested{}}{\StateAsyncSuspended{}}{True}{3}{east}

        \mess[1]{sig}{notify-initiator}{initiator}
        \begin{call}{sig}{{sigsuspend()}}{sig}{}
          \postlevel
        \end{call}
      \end{call}
    \end{call}
  \end{sequencediagram}
  \caption{POSIX signals async suspend}
  \label{fig:async-susp-posix}
\end{figure}

\paragraph{Resuming} To resume, the suspend initiator requests to transition
the victim thread state.  If the victim was async suspended, the transition
succeeds and returns \texttt{InitAsyncResume} and the victim is placed in
\StateRunning{}. The initiator then sends the resume signal to the victim and
waits for pending operations.  The signal breaks the victim out of
\texttt{sigsuspend()}.  The victim then notifies the initiator and returns from
the suspend signal handler.

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newthread{initiator}{Initiator}
    \newinst[1]{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \newinst{sig}{Signal Handler}

    \begin{call}{initiator}{begin-resume}{initiator}{}
      \StateTransitionR{initiator}{core-resume}{state}{\StateAsyncSuspended{}}{\StateRunning{}}{InitAsyncResume}{2}{west}
      \mess[1]{initiator}{{tkill()}}{sig}
      \begin{call}{initiator}{add-to-pending-ops}{initiator}{}
      \end{call}
    \end{call}
    \prelevel\prelevel\prelevel\prelevel\prelevel\prelevel
    \begin{call}{victim}{handler}{sig}{}
      \begin{call}{sig}{{sigsuspend()}}{sig}{}
        \postlevel\postlevel
      \end{call}
      \mess[1]{sig}{notify-initiator}{initiator}
    \end{call}
    \prelevel\prelevel\prelevel
    \begin{call}{initiator}{wait-for-pending-ops}{initiator}
      \postlevel\postlevel\postlevel
    \end{call}
  \end{sequencediagram}
  \caption{POSIX signals async resume}
  \label{fig:async-resume-posix}
\end{figure}

\subsection{With native suspend}

On Darwin and on Windows, we can use the operating system thread suspend calls to asynchronously suspend threads.
In this case all transitions are preformed by the initiator.

\paragraph{Suspending} The initiator switches the victim to
\StateAsyncSuspendRequested{} and then calls the OS-specific suspend syscall on
the victim thread.  After checking that the victim suspended
successfully\footnote{There may be OS-specific reasons why a victim may not be
  suspendable.}, the suspend initiator switches the victim to
\StateAsyncSuspended{} \emph{without} adding it to the pending wait operation.
Then the suspend initiator waits for pending ops (of which there should be
none).

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newthread{initiator}{Initiator}
    \newinst[1]{state}{Victim State Machine}
    \newthread{victim}{Victim}

    \begin{call}{initiator}{begin-suspend}{initiator}{}
      \StateTransitionR{initiator}{request-suspend}{state}{\StateRunning {}}{\StateAsyncSuspendRequested {}}{InitSusRunning}{2}{west}

      \mess[1]{initiator}{native-suspend-syscall}{victim} ;

      \StateTransitionR{initiator}{finish-async-suspend}{state}{\StateAsyncSuspendRequested{}}{\StateAsyncSuspended{}}{True}{2}{west}
    \end{call}
    \begin{call}{initiator}{wait-for-pending-ops}{initiator}{}
    \end{call}
  \end{sequencediagram}
  \caption{Native async suspend}
  \label{fig:native-async-susp}
\end{figure}

\paragraph{Resuming} Similar to native suspend, the initiator switches the
thread from \StateAsyncSuspended{} to \StateRunning and then uses the
OS-specific resume syscall.  Nothing is added to the pending operations set, so
the wait for pending operations after the resume returns without waiting.  We
omit the figure for this case.

\section{Blocking transitions}

So far, we have 5 possible states for a thread:

\begin{compactenum}
\item Starting
\item \StateRunning {}
\item \StateAsyncSuspendRequested {}
\item \StateAsyncSuspended {}
\item Detached
\end{compactenum}

The starting and detached states indicate threads that should be ignored by the
suspend machinery because they haven't started running yet, or because they are
no longer allowed to run any code.

In \StateAsyncSuspended {} the victim thread is not executing any code.  In the
other two states, the thread is running in a \emph{GC Unsafe} thread state.

\paragraph{GC Unsafe thread state} A GC Unsafe thread may read and write
managed memory at any time.  It may hold references to managed objects in
registers.

While any victim threads are in a GC Unsafe state, we cannot run the garbage collector.

With async suspend the suspend initiator preempts all victim threads and (in an
OS-specific manner) ensures that all references to managed objects are made
visible to the GC.

Classically with fully-preemptive suspend, Mono assumed that all mutator
threads were always in a GC Unsafe state while they were running.

\paragraph{GC Safe thread state} A GC Safe thread does not read or write any
managed memory and does not hold references to managed objects in registers.

An example of a thread that is potentially in a GC Safe state is a thread that
calls a blocking system call (without passing any managed memory reference to
the syscall).  Such a thread does not interfere with the GC until it returns.
A suspend initiator is thus free to ignore threads while they're in a GC Safe
state.

We add the following 1 new GC Safe state: \StateBlocking.

And as we shall see, we also need one more new suspended state: \StateSelfSuspended{}.

The transitions from running states to blocking states and vice-versa are
always performed by the victim thread itself.

There are three kinds of transitions between running and blocking: do blocking,
done blocking and abort blocking.  Additionally, there's a new polling
operation that arises as a complication, discussed below.

\paragraph{Do Blocking} This is ordinarily a transition from \StateRunning{} to \StateBlocking{}, see \cref{fig:do-blocking-running}.

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newinst{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \StateTransitionR{victim}{do-blocking}{state}{\StateRunning{}}{\StateBlocking{}}{Continue}{1}{east}
  \end{sequencediagram}
  \caption{Do blocking from \StateRunning {}}
  \label{fig:do-blocking-running}
\end{figure}

A complication arises if the victim thread tries to enter GC Safe mode while a
suspend initiator begins to suspend it at the same time.

If the victim is \StateAsyncSuspendRequested{}, the transition to
\StateBlocking{} isn't performed, and the victim is instructed that it must
poll and self-suspend and then to try again after resuming until a transition from
\StateRunning{} to \StateBlocking{} succeeds.

\paragraph{Polling}

When a thread tries to do blocking, but it is in \StateAsyncSuspendRequested{},
the state machine informs the victim that it must poll.  In this case the
victim will notify the initiator that it is self-suspending and wait for
resume.

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newthread{initiator}{Initiator}
    \newinst[1]{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \begin{sdblock}{Retry}{While PollAndRetry}
      \StateTransitionR{victim}{do-blocking}{state}{\StateAsyncSuspendRequested{}}{{}}{PollAndRetry}{1}{east}
      \begin{call}{victim}{poll}{victim}{}
        \StateTransitionR{victim}{poll}{state}{\StateAsyncSuspendRequested{}}{\StateSelfSuspended {}}{NotifyAndWait}{2}{east}
        \mess[1]{victim}{notify-initiator}{initiator}
        \begin{call}{victim}{wait-for-resume}{victim}{}
          \postlevel
        \end{call}
      \end{call}
    \end{sdblock}
  \end{sequencediagram}
  \caption{Do blocking from \StateAsyncSuspendRequested {}}
  \label{fig:do-blocking-async-susp-req}
\end{figure}

If using POSIX signals, it is possible for the suspend signal to be delivered
after the thread begins trying to transition to blocking, but after its state
has already been switch to \StateAsyncSuspendRequested{}.  In that case ---
seen in \cref{fig:poll-vs-posix} --- when the signal finally arrives, the
signal handler must ignore the the signal, and allow the thread to return from
the signal handler to continue waiting in the self-suspended state.
 
\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newthread{initiator}{Initiator}
    \newinst[1]{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \newinst{sig}{Signal Handler}
    \begin{call}{initiator}{beging-suspend}{initiator}{}
      \StateTransitionR{initiator}{request-suspend}{state}{\StateRunning {}}{\StateAsyncSuspendRequested {}}{InitSusRunning}{2}{west}
      \prelevel
      \begin{call}{victim}{enter-gc-safe}{victim}{}
        \StateTransitionR{victim}{do-blocking}{state}{\StateAsyncSuspendRequested{}}{{}}{PollAndRetry}{3}{east}
        \begin{call}{victim}{poll}{victim}{}
          \StateTransitionR{victim}{poll}{state}{\StateAsyncSuspendRequested{}}{\StateSelfSuspended {}}{NotifyAndWait}{4}{east}
          \mess[1]{victim}{notify-initiator}{initiator}
          \mess[1]{initiator}{{tkill()}}{victim}
          \prelevel\prelevel
          \begin{call}{victim}{wait-for-resume}{victim}{}
            \postlevel
            \begin{call}{victim}{handler}{sig}{}
              \StateTransitionR{sig}{finish-async-suspend}{state}{\StateSelfSuspended {}}{{}}{False}{6}{east}
            \end{call}
          \end{call}          
        \end{call}
      \end{call}
    \end{call}
  \end{sequencediagram}
  \caption{Blocking raced with suspend; victim self-suspended }
  \label{fig:poll-vs-posix}
\end{figure}



\paragraph{Done Blocking}
Ordinarily, this is a transition from \StateBlocking{} to \StateRunning{}.

When we discuss hybrid suspend, we will see that there are additional transitions in this case.

\paragraph{Abort Blocking} This is a transition from \StateBlocking{} to
\StateRunning{}.

Abort blocking is often used to temporarily escape from GC Safe mode to GC
Unsafe.  The most common usage of it is to implement the
\texttt{MONO\_ENTER\_GC\_UNSAFE} macro.  The macro is used in Mono Runtime
functions that may be called either from GC Safe or GC Unsafe state.  As a
result, the abort blocking transition may (unlike the done blocking transition)
be requested from \StateRunning{} or \StateAsyncSuspendRequested{}, too.  Abort
Blocking is used to ensure that a thread is in a running state when it is
unknown what its current state it.  (By contrast, a Done Blocking transition
from a blocking state is a programmer error.)

If the victim is in \StateRunning{}, the abort is simply ignored. The victim
states in \StateRunning{} and records that \texttt{MONO\_EXIT\_GC\_UNSAFE} should
also be a no-op.

If the victim was in \StateAsyncSuspendRequested{}, the thread must poll and
self-suspend and then ignore the abort request.  See
\cref{fig:abort-blocking-suspend-requested}.

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newinst{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \begin{call}{victim}{abort-blocking}{victim}{}
      \StateTransitionR{victim}{abort-blocking}{state}{\StateAsyncSuspendRequested{}}{{}}{IgnoreAndPoll}{2}{east}
      \begin{call}{victim}{poll}{victim}{}
        \postlevel
      \end{call}
    \end{call}
  \end{sequencediagram}
  \caption{Abort blocking from \StateAsyncSuspendRequested{}}
  \label{fig:abort-blocking-suspend-requested}
\end{figure}

\subsection{How to suspend GC Safe threads}

So far we've seen how to suspend GC Unsafe threads (ie those in
\StateRunning{}), and also how to transition from GC Unsafe to GC Safe states
(ie from \StateRunning{} to \StateBlocking{}).

There is now the question of how to suspend GC Safe threads.

There are four possibilities:

\begin{enumerate}
\item[Both preemptive] As with GC Unsafe threads, we could suspend GC Safe
  threads preemptively.  This is equivalent to just using fully preemptive
  suspend, but with extra bookkeeping for thread state transitions.  This will
  require an extra \StateBlockingSuspendRequested{} state, and has the same
  possibility of racing between POSIX signals and thread self-transitions.
  This option is available in Mono by setting
  \texttt{MONO\_THREADS\_SUSPEND=preemptive} and
  \texttt{MONO\_ENABLE\_BLOCKING\_TRANSITION}.  It is not used in any
  production build.
\item[GC Unsafe preemptive, GC Safe running] GC Safe threads can simply be left
  to run - after all they promised not to touch managed memory.  Unfortunately,
  this mode is not usable with Mono's current embedding API: the API freely
  returns pointers to managed memory.  Even if all entry and exit points
  between Mono (managed and runtime code) and external native code are
  instrumented to perform GC Safe/GC Unsafe transitions (or vice versa), live
  pointers between API calls would dangle.  If embedder code were left to run,
  it could call one Mono API function to obtain a pointer.  Then the GC could
  move the managed object and the embedder would be left with a dangling
  pointer.
\item[GC Unsafe cooperative, GC Safe preemptive] This is
  \texttt{MONO\_THREADS\_SUSPEND=hybrid}.  The advantage of this mode is that
  internally mono can use cooperative suspend (see
  \cref{sec:fully-cooperative}), while embedder and pinvoke'd code can be
  oblivious.  Since embedder code would be preemptively suspended between calls
  to the Mono API, it would not be able to modify managed objects at the same
  time as the GC, and also pointers from the embedder to managed memory would
  be visible to the GC.  This is our preferred mode for desktop Mono.
\item[GC Unsafe cooperative, GC Safe running] This is Mono's fully cooperative
  mode \texttt{MONO\_THREADS\_SUSPEND=cooperative}.  The disadvantage here is
  that embedder code, not just runtime code, must be instrumented with GC
  Safe/GC Unsafe transitions in order to have regions of code where managed
  pointers between sequences of Mono API calls are live.  This is currently
  used only on LLVM bitcode targets where async suspend is not usable and the
  embedding code has already been instrumented.
\end{enumerate}

\section{Cooperative suspend}
\label{sec:fully-cooperative}

With preemptive suspend, the victim thread has no control over when it may be
suspended - if using native syscalls, it is simply stopped, if using POSIX
signals, the signal handler may be invoked at any time.

Cooperative suspend gives the victim thread control over its suspend behavior.
Instead of receiving an asynchronous signal, the victim periodically polls to
find out if a suspension has been requested.  The advantage is that the thread
will only be suspended when it is ready.  The disadvantage is that if the
victim performs an operation that takes an unbounded amount of time without
polling, the entire Mono process hangs.

To support fully-cooperative suspend and blocking operations, all code must be
instrumented with transitions to GC Safe mode around blocking calls.
Additionally, periodic polling operations must be inserted: Mono's JIT compiler
inserts poll operations at each function and loop entry; native code must be
hand-modified.

There is one more suspend state for a GC Unsafe thread: \StateSelfSuspended {}.

Thre is one more GC Safe state: \StateBlockingSuspendRequested{}.

Thre is also a suspend state for a GC Safe thread: \StateBlockingSelfSuspended {}.

Unsurprisingly, the GC Unsafe async suspend state \StateAsyncSuspended is not
used in fully cooperative suspend.

\subsection{Running threads}

With fully cooperative suspend, threads in \StateRunning{} are transitioned to
\StateAsyncSuspendRequested{} and the suspend initiator is instructed to wait.
The victim thread is responsible for the transition from
\StateAsyncSuspendRequested{} to \StateSelfSuspended{}.

\subsection{Blocking threads}

With fully cooperative suspend, threads in \StateBlocking{} are transitioned to
\StateBlockingSuspendRequested{} and then allowed to continue running.  The
suspend initiator simply ignores them until it is time to resume.

\subsection{GC Safe / GC Unsafe transitions}

With fully cooperative suspend, a thread in \StateBlockingSuspendRequested{},
since it is running, may eventually need to transition to GC Unsafe mode ---
either with done blocking or abort blocking.  In either case, the thread
instead transitions to \StateBlockingSelfSuspended{} and waits for a resume
notification.  See \cref{fig:done-blocking-self-suspend}.

\begin{figure}[!h]
  \centering
  \begin{sequencediagram}
    \newthread{initiator}{Initiator}
    \newinst[1]{state}{Victim State Machine}
    \newthread{victim}{Victim}
    \begin{call}{victim}{done-blocking}{victim}{}
      \StateTransitionR{victim}{done-blocking}{state}{\StateBlockingSuspendRequested{}}{\StateBlockingSelfSuspended{}}{DoneBlockingWait}{2}{east}
      \begin{call}{victim}{wait-for-resume}{victim}{}
        \postlevel
      \end{call}
    \end{call}
  \end{sequencediagram}
  \caption{Done blocking thread self-suspending}
  \label{fig:done-blocking-self-suspend}
\end{figure}


\paragraph{Resuming from \StateBlockingSelfSuspended{}} When the suspend
initiator resumes a \StateBlockingSelfSuspended{} victim thread, it finishes
its GC Safe to GC Unsafe transition and continues in \StateRunning{}.

\section{Hybrid suspend - single victim}

We have just one new GC Safe suspended state: \StateBlockingSelfSuspended{}.

With hybrid suspend, all 4 async and self-suspended states are used.

We have already seen all the building blocks for hybrid suspend:
\begin{itemize}
\item Threads in GC Unsafe mode cooperatively suspend: the transition from
  \StateRunning{} to \StateAsyncSuspendRequested{} returns a value that tells the suspend
  initiator to simply wait for the victim to self-suspend.
\item Threads in GC Safe mode preemptively suspend: the transition from
  \StateBlocking{} to \StateBlockingSuspendRequested{} returns a value that
  tells the suspend initiator to preemptively suspend the victim.  This is
  entirely analogous to the fully preemptive async suspend in
  \cref{sec:fully-preemptive}, except using blocking states.\marginpar{Diagrams here?}
\item Preemptive suspend of GC Safe threads can have a race between the victim
  thread attempting to transition from GC Safe to GC Unsafe while at the same
  time the suspend initiator is trying to send a signal.  This is where the new
  \StateBlockingSelfSuspended{} state is used.\marginpar{Diagram here, for sure}
\end{itemize}

There is just one entirely new move: a thread in \StateBlockingAsyncSuspended{}
must resume to \StateBlocking{}, rather than \StateRunning{}.  If a GC Safe
thread is asynchronously suspended, it hasn't reached a GC Safe to GC Unsafe
transition, so it should start back up in GC Safe mode.


\section{Hybrid suspend - multiple victims - two phase suspend}

While it may appear that we're done, there is one more complication with hybrid suspend.

So far we have looked at simplified situations where there is a single suspend
initiator (this is expected), and a single victim thread.  In reality, there
may be multiple victim threads.

If the suspend initiator needs to stop the entire world (for example, the
garbage collector does this), it will first begin suspend operatiosn for all
the victims, and then wait for the pending operations all at once at the end,
rather than suspending each victim and waiting for it.

With fully preemptive or fully cooperative suspend, this works fine.
Preemptive suspend simply doesn't care what a victim might be doing.  Fully
cooperative suspend cannot stop deadlocked threads, but neither does it
introduce additional deadlocks.

With hybrid suspend, however, it is possible to get a deadlock due to system
calls.

We normally, incorrectly, think of system library calls as black boxes.  But
they may internally take locks.  Moreover, on Linux, even the dynamic linker
may need to take locks, so even a function call to a shared library that is not
yet loaded may need locking.

This becomes relevant with hybrid suspend if two victim threads, one in GC Safe
mode one in GC Unsafe, are to be suspended.

The suspend initiator may suspend the threads in arbitrary order, and if it
happens to suspend the the GC Safe thread preemptively while it is holding some
system lock, and then attempt to suspend the GC Unsafe thread cooperatively
while it is attempting to acquire the system lock, the entire ensemble will be
deadlocked.\marginpar{TODO: Pics}

\end{document}